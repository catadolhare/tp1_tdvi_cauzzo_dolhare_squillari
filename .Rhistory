rpart.plot(tree)
sample_datos$satisfaction
datos_train <- read.csv("train.csv")
datos_train <- read.csv("train.csv")
datos_test <- read.csv("test.csv")
datos<-rbind(datos_train, datos_test)
datos
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
```{r}
sample_datos$satisfaction
sample_datos$satisfaction
sample_datos$satisfaction <- as.numeric(as.factor(sample_datos$satisfaction)) - 1
sample_datos$satisfaction
sample_datos$satisfaction
summary(sample_datos)
plot(sample_datos$Departure.Delay.in.Minutes, sample_datos$Arrival.Delay.in.Minutes, main = "Departure Delay vs. Arrival Delay", xlab = "Departure delay en minutos", ylab = "Arrival delay en minutos")
entrenamiento <- sample_datos[1:35000,]
validacion <- sample_datos[35001:42500,]
testeo <- sample_datos[42501:50000,]
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
```{r}
library(rpart)
library(rpart)
```{r}
tree <- rpart(formula = satisfaction ~ .,
data = entrenamiento,
method = "class")
tree$control
tree <- rpart(formula = satisfaction ~ .,
data = entrenamiento,
method = "class")
tree$control
```{r}
library(rpart.plot)
rpart.plot(tree)
install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
numeric_data <- sample_datos[, sapply(sample_datos, is.numeric)]
cor_matrix <- cor(numeric_data)
corrplot(cor_matrix, method = "color")
plot(sample_datos$Departure.Delay.in.Minutes, sample_datos$Arrival.Delay.in.Minutes, main = "Departure Delay vs. Arrival Delay", xlab = "Departure delay en minutos", ylab = "Arrival delay en minutos")
```{r}
plot(sample_datos$Departure.Delay.in.Minutes, sample_datos$Arrival.Delay.in.Minutes, main = "Departure Delay vs. Arrival Delay", xlab = "Departure delay en minutos", ylab = "Arrival delay en minutos")
datos_train <- read.csv("train.csv")
datos_train <- read.csv("train.csv")
datos_test <- read.csv("test.csv")
```{r}
datos
datos<-rbind(datos_train, datos_test)
datos
```{r}
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
```{r}
sample_datos$satisfaction <- as.numeric(as.factor(sample_datos$satisfaction)) - 1
sample_datos$satisfaction <- as.numeric(as.factor(sample_datos$satisfaction)) - 1
```{r}
summary(sample_datos)
summary(sample_datos)
```{r}
plot(sample_datos$Departure.Delay.in.Minutes, sample_datos$Arrival.Delay.in.Minutes, main = "Departure Delay vs. Arrival Delay", xlab = "Departure delay en minutos", ylab = "Arrival delay en minutos")
library(corrplot)
numeric_data <- sample_datos[, sapply(sample_datos, is.numeric)]
cor_matrix <- cor(numeric_data)
corrplot(cor_matrix, method = "color")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(sample_datos, aes(x = sample_datos$Departure.Delay.in.Minutes, fill = factor(satisfaction))) +
geom_histogram(position = "dodge", bins = 30, alpha = 0.7) +
labs(title = "Distribución del Departure Delay según Satisfaction",
x = "Departure Delay",
y = "Frecuencia",
fill = "Satisfaction") +
theme_minimal()
ggplot(sample_datos, aes(x = Departure.Delay.in.Minutes, fill = factor(satisfaction))) +
geom_histogram(position = "dodge", bins = 30, alpha = 0.7) +
labs(title = "Distribución del Departure Delay según Satisfaction",
x = "Departure Delay",
y = "Frecuencia",
fill = "Satisfaction") +
theme_minimal()
ggplot(sample_datos, aes(x = Departure.Delay.in.Minutes, fill = satisfaction)) +
geom_histogram(position = "dodge", bins = 30, alpha = 0.7) +
labs(title = "Distribución del Departure Delay según Satisfaction",
x = "Departure Delay",
y = "Frecuencia",
fill = "Satisfaction") +
theme_minimal()
ggplot(sample_datos, aes(x = Departure.Delay.in.Minutes, fill = group(satisfaction)) +
ggplot(sample_datos, aes(x = Departure.Delay.in.Minutes, fill = group(satisfaction))) +
geom_histogram(position = "dodge", bins = 30, alpha = 0.7) +
labs(title = "Distribución del Departure Delay según Satisfaction",
x = "Departure Delay",
y = "Frecuencia",
fill = "Satisfaction") +
theme_minimal()
ggplot(sample_datos, aes(x = Departure.Delay.in.Minutes, fill = factor(satisfaction))) +
factor(
ggplot(sample_datos, aes(x = Departure.Delay.in.Minutes, fill = factor(satisfaction))) +
geom_histogram(position = "dodge", bins = 30, alpha = 0.7) +
labs(title = "Distribución del Departure Delay según Satisfaction",
x = "Departure Delay",
y = "Frecuencia",
fill = "Satisfaction") +
theme_minimal()
install.packages("psych")
library(psych)
datos_train <- read.csv("train.csv")
datos_test <- read.csv("test.csv")
datos<-rbind(datos_train, datos_test)
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
sample_datos$satisfaction <- as.numeric(as.factor(sample_datos$satisfaction)) - 1
summary(sample_datos)
plot(sample_datos$Departure.Delay.in.Minutes, sample_datos$Arrival.Delay.in.Minutes, main = "Departure Delay vs. Arrival Delay", xlab = "Departure delay en minutos", ylab = "Arrival delay en minutos")
#install.packages("GGally")
library(GGally)
ggpairs(iris,                 # Data frame
columns = 1:4,        # Columnas
aes(color = Species,  # Color por grupo (var. categórica)
alpha = 0.5))     # Transparencia
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
# Crear el gráfico de densidad superpuesto
ggplot(sample_datos, aes(x = Departure.Delay.in.Minutes, fill = satisfaction, color = satisfaction)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("red", "blue")) +
scale_color_manual(values = c("red", "blue")) +
labs(x = "Departure Delay in Minutes",
y = "Density",
fill = "Satisfaction",
color = "Satisfaction",
title = "Densidad de Departure Delay in Minutes segn Satisfaccion") +
theme_minimal()
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Flight.Distance, fill = Type.of.Travel),
colour = "black") +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = satisfaction, fill = Type.of.Travel),
colour = "black") +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = satisfaction, fill = Type.of.Travel),
colour = "black", binwidth = 10) +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = satisfaction, fill = Type.of.Travel),
colour = "black", binwidth = 20) +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = satisfaction, fill = Type.of.Travel),
colour = "black", binwidth = 1) +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = satisfaction, fill = Type.of.Travel),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
#install.packages("corrplot")
library(corrplot)
numeric_data <- sample_datos[, sapply(sample_datos, is.numeric)]
cor_matrix <- cor(numeric_data)
corrplot(cor_matrix, method = "color",
tl.col = "black", tl.srt = 45, tl.cex = 0.5,  # Ajustes de etiquetas
cl.ratio = 0.2,  # Ajustar el tamaño de las celdas
addgrid.col = "black", # Añadir color a las líneas de la cuadrícula
addCoef.col = "black",
number.cex = 0.3)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Departure.Delay.in.Minutes, fill = satisfaction),
colour = "black") +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Departure.Delay.in.Minutes, fill = satisfaction),
colour = "black") +
scale_fill_viridis_d() +
facet_wrap(~ satisfaction)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Departure.Delay.in.Minutes, fill = satisfaction),
colour = "black") +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
hist(sample_datos$Departure.Delay.in.Minutes)
# Filtra los datos para que solo incluyan satisfaction = 1
datos_satisfied <- sample_datos[sample_datos$satisfaction == 1, ]
# Filtra los datos para que solo incluyan satisfaction = 1
datos_satisfied <- sample_datos[sample_datos$satisfaction == 1, ]
# Crea el histograma del delay usando los datos filtrados
hist(datos_satisfied$Departure.Delay.in.Minutes,
main = "Histograma de Delay (Satisfaction = 1)",
xlab = "Delay",
ylab = "Frecuencia",
col = "blue",
border = "black")
datos_unsatisfied <- sample_datos[sample_datos$satisfaction == 0, ]
par(mfrow=c(2,2))
# Crea el histograma del delay usando los datos filtrados
hist(datos_satisfied$Departure.Delay.in.Minutes,
main = "Histograma de Delay (Satisfaction = 1)",
xlab = "Delay",
ylab = "Frecuencia",
col = "blue",
border = "black")
hist(datos_unsatisfied$Departure.Delay.in.Minutes,
main = "Histograma de Delay (Satisfaction = 1)",
xlab = "Delay",
ylab = "Frecuencia",
col = "red",
border = "black")
par(mfrow=c(1,2))
# Crea el histograma del delay usando los datos filtrados
hist(datos_satisfied$Departure.Delay.in.Minutes,
main = "Histograma de Delay (Satisfaction = 1)",
xlab = "Delay",
ylab = "Frecuencia",
col = "blue",
border = "black")
hist(datos_unsatisfied$Departure.Delay.in.Minutes,
main = "Histograma de Delay (Satisfaction = 1)",
xlab = "Delay",
ylab = "Frecuencia",
col = "red",
border = "black")
par(mfrow=c(1,2))
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Departure.Delay.in.Minutes , fill = satisfaction),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ as.character(satisfaction))
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Departure.Delay.in.Minutes , fill = satisfaction),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ as.factor(satisfaction))
sample_datos$satisfaction <- as.factor(sample_datos$satisfaction)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Departure.Delay.in.Minutes , fill = satisfaction),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ satisfaction)
sample_datos$satisfaction <- as.factor(sample_datos$satisfaction)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Departure.Delay.in.Minutes, y = ..density.., fill = satisfaction),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ satisfaction)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = Departure.Delay.in.Minutes, y = after_stat(density), fill = satisfaction),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ satisfaction)
install.packages("caret")
library(caret)
matriz_confusion <- confusionMatrix(predictions, testeo$satisfaction)
library(caret)
install.packages("recipes")
library(caret)
library(caret)
library(recipes)
install.packages("recipes")
library(recipes)
library(recipes)
library(recipes)
tree <- rpart(formula = satisfaction ~ Flight.distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.confort + Inflight.entretainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
library(rpart)
entrenamiento <- sample_datos[1:35000,]
validacion <- sample_datos[35001:42500,]
testeo <- sample_datos[42501:50000,]
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
```{r}
library(rpart)
library(rpart)
```{r}
tree <- rpart(formula = satisfaction ~ Flight.distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.confort + Inflight.entretainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.confort + Inflight.entretainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entretainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree$control
library(rpart.plot)
rpart.plot(tree)
