xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
entrenamiento <- sample_datos[1:35000,]
validacion <- sample_datos[35001:42500,]
testeo <- sample_datos[42501:50000,]
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
library(rpart)
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree$control
library(rpart.plot)
rpart.plot(tree)
predictions_clase <- predict(tree, newdata = testeo, type = "class")
predictions_prob <- predict(tree, newdata = testeo, type = "prob")
#install.packages("MLmetrics")
library(MLmetrics)
ConfusionMatrix(y_pred = predictions_clase, y_true = testeo$satisfaction)
Accuracy(y_pred = predictions_clase, y_true = testeo$satisfaction)
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction)
Recall(y_pred = predictions_clase, y_true = testeo$satisfaction)
F1_Score(y_pred = predictions_clase, y_true = testeo$satisfaction)
AUC(y_pred = predictions_clase, y_true = testeo$satisfaction)
valores_maxdepth <- c(2, 5, 7, 10, 12, 15)
valores_minsplit <- c(15, 20, 25, 30, 35)
valores_minbucket <- c(10, 20, 30, 40, 50)
buscar_hiperparametros <- function(entrenamiento, validacion, valores_maxdepth, valores_minsplit, valores_minbucket){
valores_auc <- c()
best_auc <- 0
best_params <- c()
for (i in 1:length(valores_maxdepth)){
for (j in 1:length(valores_minsplit)){
for (l in 1:length(valores_minbucket)){
tree2 <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree2, newdata = validacion, type = "class")
auc <- AUC(y_pred = predicciones, y_true = validacion$satisfaction)
valores_auc <<- c(valores_auc, auc)
if (!is.na(auc) && auc > best_auc){
best_auc <<- auc
best_params <<- c(valores_maxdepth[i], valores_minsplit[j], valores_minbucket[l])
}
}
}
}
return (list(valores_auc, best_auc, best_params))
}
best <- buscar_hiperparametros(entrenamiento = entrenamiento, validacion = validacion, valores_maxdepth = valores_maxdepth, valores_minsplit = valores_minsplit, valores_minbucket = valores_minbucket)
best$valores_auc
best$best_auc
best$best_params
best_tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = best$best_params[1], minsplit = best$best_params[2], minbucket = best$best_params[3], cp = 0, xval = 0))
datos_train <- read.csv("train.csv")
datos_test <- read.csv("test.csv")
datos<-rbind(datos_train, datos_test)
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
sample_datos$satisfaction <- as.numeric(as.factor(sample_datos$satisfaction)) - 1
summary(sample_datos)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("corrplot")
library(corrplot)
numeric_data <- sample_datos[, sapply(sample_datos, is.numeric)]
cor_matrix <- cor(numeric_data)
corrplot(cor_matrix, method = "color",
tl.col = "black", tl.srt = 45, tl.cex = 0.5,  # Ajustes de etiquetas
cl.ratio = 0.2,  # Ajustar el tamaño de las celdas
addgrid.col = "black", # Añadir color a las líneas de la cuadrícula
addCoef.col = "black",
number.cex = 0.3)
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
delay_satisfecho <- sample_datos$Departure.Delay.in.Minutes[sample_datos$satisfaction == 1]
delay_insatisfecho <- sample_datos$Departure.Delay.in.Minutes[sample_datos$satisfaction == 0]
hist(delay_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Departure Delay in Minutes",
xlim = c(0, max(sample_datos$Departure.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(delay_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Departure Delay in Minutes",
xlim = c(0, max(sample_datos$Departure.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
arrival_satisfecho <- sample_datos$Arrival.Delay.in.Minutes[sample_datos$satisfaction == 1]
arrival_insatisfecho <- sample_datos$Arrival.Delay.in.Minutes[sample_datos$satisfaction == 0]
hist(arrival_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Arrival Delay in Minutes",
xlim = c(0, max(sample_datos$Arrival.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(arrival_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Arrival Delay in Minutes",
xlim = c(0, max(sample_datos$Arrival.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
departure_arrival_satisfecho <- sample_datos$Departure.Arrival.time.convenient[sample_datos$satisfaction == 1]
departure_arrival_insatisfecho <- sample_datos$Departure.Arrival.time.convenient[sample_datos$satisfaction == 0]
hist(departure_arrival_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(departure_arrival_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
gate_satisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 1]
gate_insatisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 0]
hist(gate_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(gate_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "blue",
border = "black")
library(ggplot2)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = satisfaction, fill = Type.of.Travel),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
onlineb_satisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 1]
onlineb_insatisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 0]
hist(onlineb_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "pink",
border = "black")
# Histograma para los clientes insatisfechos
hist(onlineb_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
entrenamiento <- sample_datos[1:35000,]
validacion <- sample_datos[35001:42500,]
testeo <- sample_datos[42501:50000,]
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
library(rpart)
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree$control
library(rpart.plot)
rpart.plot(tree)
predictions_clase <- predict(tree, newdata = testeo, type = "class")
predictions_prob <- predict(tree, newdata = testeo, type = "prob")
#install.packages("MLmetrics")
library(MLmetrics)
ConfusionMatrix(y_pred = predictions_clase, y_true = testeo$satisfaction)
Accuracy(y_pred = predictions_clase, y_true = testeo$satisfaction)
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction)
Recall(y_pred = predictions_clase, y_true = testeo$satisfaction)
F1_Score(y_pred = predictions_clase, y_true = testeo$satisfaction)
AUC(y_pred = predictions_clase, y_true = testeo$satisfaction)
valores_maxdepth <- c(2, 5, 7, 10, 12, 15)
valores_minsplit <- c(15, 20, 25, 30, 35)
valores_minbucket <- c(10, 20, 30, 40, 50)
buscar_hiperparametros <- function(entrenamiento, validacion, valores_maxdepth, valores_minsplit, valores_minbucket){
valores_auc <- c()
best_auc <- 0
best_params <- c()
for (i in 1:length(valores_maxdepth)){
for (j in 1:length(valores_minsplit)){
for (l in 1:length(valores_minbucket)){
tree2 <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree2, newdata = validacion, type = "class")
auc <- AUC(y_pred = predicciones, y_true = validacion$satisfaction)
valores_auc <<- c(valores_auc, auc)
if (!is.na(auc) && auc > best_auc){
best_auc <<- auc
best_params <<- c(valores_maxdepth[i], valores_minsplit[j], valores_minbucket[l])
}
}
}
}
return (list(valores_auc, best_auc, best_params))
}
best <- buscar_hiperparametros(entrenamiento = entrenamiento, validacion = validacion, valores_maxdepth = valores_maxdepth, valores_minsplit = valores_minsplit, valores_minbucket = valores_minbucket)
best$valores_auc
best$best_auc
best$best_params
best_tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = best$best_params[1], minsplit = best$best_params[2], minbucket = best$best_params[3], cp = 0, xval = 0))
buscar_hiperparametros <- function(entrenamiento, validacion, valores_maxdepth, valores_minsplit, valores_minbucket){
valores_auc <- c()
best_auc <- 0
best_params <- c()
for (i in 1:length(valores_maxdepth)){
for (j in 1:length(valores_minsplit)){
for (l in 1:length(valores_minbucket)){
tree2 <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree2, newdata = validacion, type = "class")
auc <- AUC(y_pred = predicciones, y_true = validacion$satisfaction)
valores_auc <<- c(valores_auc, auc)
if (!is.na(auc) && auc > best_auc){
best_auc <<- auc
best_params <<- c(valores_maxdepth[i], valores_minsplit[j], valores_minbucket[l])
}
}
}
return (list(valores_auc, best_auc, best_params))
}
buscar_hiperparametros <- function(entrenamiento, validacion, valores_maxdepth, valores_minsplit, valores_minbucket){
valores_auc <- c()
best_auc <- 0
best_params <- c()
for (i in 1:length(valores_maxdepth)){
for (j in 1:length(valores_minsplit)){
for (l in 1:length(valores_minbucket)){
tree2 <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree2, newdata = validacion, type = "class")
auc <- AUC(y_pred = predicciones, y_true = validacion$satisfaction)
valores_auc <<- c(valores_auc, auc)
if (!is.na(auc) && auc > best_auc){
best_auc <<- auc
best_params <<- c(valores_maxdepth[i], valores_minsplit[j], valores_minbucket[l])
}
}
}
}
return (list(valores_auc = valores_auc, best_auc = best_auc, best_params = best_params))
}
best <- buscar_hiperparametros(entrenamiento = entrenamiento, validacion = validacion, valores_maxdepth = valores_maxdepth, valores_minsplit = valores_minsplit, valores_minbucket = valores_minbucket)
best$valores_auc
best$best_auc
best$best_params
buscar_hiperparametros <- function(entrenamiento, validacion, valores_maxdepth, valores_minsplit, valores_minbucket){
valores_auc <- c()
best_auc <- 0
best_params <- c()
for (i in 1:length(valores_maxdepth)){
for (j in 1:length(valores_minsplit)){
for (l in 1:length(valores_minbucket)){
tree2 <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree2, newdata = validacion, type = "class")
auc <- AUC(y_pred = predicciones, y_true = validacion$satisfaction)
valores_auc <- c(valores_auc, auc)
if (!is.na(auc) && auc > best_auc){
best_auc <- auc
best_params <- c(valores_maxdepth[i], valores_minsplit[j], valores_minbucket[l])
}
}
}
}
return (list(valores_auc = valores_auc, best_auc = best_auc, best_params = best_params))
}
best <- buscar_hiperparametros(entrenamiento = entrenamiento, validacion = validacion, valores_maxdepth = valores_maxdepth, valores_minsplit = valores_minsplit, valores_minbucket = valores_minbucket)
best$valores_auc
best$best_auc
best$best_params
# Calcular las tasas de verdaderos positivos y falsos positivos
roc_data <- pROC::roc(testeo$satisfaction, predictions_clase)
best_tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = best$best_params[1], minsplit = best$best_params[2], minbucket = best$best_params[3], cp = 0, xval = 0))
best_predicciones <- predict(best_tree, newdata = validacion, type = "class")
AUC(y_pred = best_predicciones, y_true = testeo$satisfaction)
rpart.plot(best_tree)
reemplazar_na <- function(data, porcentaje_na) {
for (i in 1:ncol(data)) {
# Contar el número actual de NA en la columna
na_existentes <- sum(is.na(data[i]))
# Calcular cuántos NA totales debería haber para alcanzar el porcentaje deseado
num_na_deseado <- round(porcentaje_na * nrow(data))
# Calcular cuántos nuevos NA se necesitan para alcanzar el porcentaje
nuevos_na <- num_na_deseado - na_existentes
# Solo agregar nuevos NA si el número necesario es positivo
if (nuevos_na > 0) {
na_indices <- sample(1:nrow(data), nuevos_na)
data$i[na_indices] <- NA
}
}
return(data)
}
entrenamiento_na_20 <- reemplazar_na(entrenamiento, 0.20)
validacion_na_20 <- reemplazar_na(validacion, 0.20)
testeo_na_20 <- reemplazar_na(testeo, 0.20)
entrenamiento_na_50 <- reemplazar_na(entrenamiento, 0.50)
validacion_na_50 <- reemplazar_na(validacion, 0.50)
testeo_na_50 <- reemplazar_na(testeo, 0.50)
entrenamiento_na_75 <- reemplazar_na(entrenamiento, 0.75)
validacion_na_75 <- reemplazar_na(validacion, 0.75)
testeo_na_75 <- reemplazar_na(testeo, 0.75)
View(testeo_na_75)
reemplazar_na <- function(data, porcentaje_na) {
for (i in 1:ncol(data)) {
# Contar el número actual de NA en la columna
na_existentes <- sum(is.na(data[i]))
# Calcular cuántos NA totales debería haber para alcanzar el porcentaje deseado
num_na_deseado <- round(porcentaje_na * nrow(data))
# Calcular cuántos nuevos NA se necesitan para alcanzar el porcentaje
nuevos_na <- num_na_deseado - na_existentes
# Solo agregar nuevos NA si el número necesario es positivo
if (nuevos_na > 0) {
na_indices <- sample(1:nrow(data), nuevos_na)
data$data[i][na_indices] <- NA
}
}
return(data)
}
entrenamiento_na_20 <- reemplazar_na(entrenamiento, 0.20)
validacion_na_20 <- reemplazar_na(validacion, 0.20)
testeo_na_20 <- reemplazar_na(testeo, 0.20)
entrenamiento_na_50 <- reemplazar_na(entrenamiento, 0.50)
validacion_na_50 <- reemplazar_na(validacion, 0.50)
testeo_na_50 <- reemplazar_na(testeo, 0.50)
entrenamiento_na_75 <- reemplazar_na(entrenamiento, 0.75)
validacion_na_75 <- reemplazar_na(validacion, 0.75)
testeo_na_75 <- reemplazar_na(testeo, 0.75)
View(testeo_na_75)
summary(sample_datos)
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
delay_satisfecho <- sample_datos$Departure.Delay.in.Minutes[sample_datos$satisfaction == 1]
delay_insatisfecho <- sample_datos$Departure.Delay.in.Minutes[sample_datos$satisfaction == 0]
hist(delay_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Departure Delay in Minutes",
xlim = c(0, max(sample_datos$Departure.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(delay_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Departure Delay in Minutes",
xlim = c(0, max(sample_datos$Departure.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
arrival_satisfecho <- sample_datos$Arrival.Delay.in.Minutes[sample_datos$satisfaction == 1]
arrival_insatisfecho <- sample_datos$Arrival.Delay.in.Minutes[sample_datos$satisfaction == 0]
hist(arrival_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Arrival Delay in Minutes",
xlim = c(0, max(sample_datos$Arrival.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(arrival_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Arrival Delay in Minutes",
xlim = c(0, max(sample_datos$Arrival.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "blue",
border = "black")
library(ggplot2)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = satisfaction, fill = Type.of.Travel),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
departure_arrival_satisfecho <- sample_datos$Departure.Arrival.time.convenient[sample_datos$satisfaction == 1]
departure_arrival_insatisfecho <- sample_datos$Departure.Arrival.time.convenient[sample_datos$satisfaction == 0]
hist(departure_arrival_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(departure_arrival_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
gate_satisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 1]
gate_insatisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 0]
hist(gate_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(gate_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
onlineb_satisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 1]
onlineb_insatisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 0]
hist(onlineb_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "pink",
border = "black")
# Histograma para los clientes insatisfechos
hist(onlineb_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
#install.packages("ggplot2")
library(ggplot2)
#install.packages("corrplot")
library(corrplot)
library(rpart)
library(rpart.plot)
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree$control
rpart.plot(tree)
