xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "blue",
border = "black")
```{r, echo=FALSE}
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
gate_satisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 1]
gate_insatisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 0]
hist(gate_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(gate_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "blue",
border = "black")
# Histograma para los clientes insatisfechos
hist(gate_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "blue",
border = "black")
# Histograma para los clientes insatisfechos
hist(gate_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "blue",
border = "black")
El siguiente grafico muestra la relación entre la variable "Type of Travel" y "satisfaction":
En el siguiente histograma, queremos demostrar la relación entre la variable "Online boarding" y "satisfaction".
# Filtrar los datos por nivel de satisfacción
onlineb_satisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 1]
onlineb_insatisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 0]
hist(onlineb_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "pink",
border = "black")
# Histograma para los clientes insatisfechos
hist(onlineb_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
# Histograma para los clientes insatisfechos
hist(onlineb_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
# Histograma para los clientes insatisfechos
hist(onlineb_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
*3. Construcción de un árbol de decisión básico*
```{r}
entrenamiento <- sample_datos[1:35000,]
validacion <- sample_datos[35001:42500,]
testeo <- sample_datos[42501:50000,]
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
```{r}
library(rpart)
library(rpart)
```{r}
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree$control
```{r}
library(rpart.plot)
rpart.plot(tree)
ConfusionMatrix(y_pred = predictions_clase, t_true = testeo$satisfaction)
install.packages("MLmetrics")
library(MLmetrics)
install.packages("MLmetrics")
library(MLmetrics)
install.packages("MLmetrics")
library(MLmetrics)
install.packages("MLmetrics")
library(MLmetrics)
ConfusionMatrix(y_pred = predictions_clase, t_true = testeo$satisfaction)
ConfusionMatrix(y_pred = predictions_clase, y_true = testeo$satisfaction)
predictions_clase <- predict(tree, newdata = testeo, type = "class")
predictions_prob <- predict(tree, newdata = testeo, type = "prob")
ConfusionMatrix(y_pred = predictions_clase, y_true = testeo$satisfaction)
Accuracy(y_pred = predictions_clase, y_true = testeo$satisfaction)
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction, positive = "1")
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction)
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction, positive = 1)
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction)
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction, positive = 1)
Recall(y_pred = predictions_clase, y_true = testeo$satisfaction)
Recall(y_pred = predictions_clase, y_true = testeo$satisfaction, positive = 1)
F1_Score(y_pred = predictions_clase, y_true = testeo$satisfaction)
F1_Score(y_pred = predictions_clase, y_true = testeo$satisfaction, positive = 1)
AUC(y_pred = predictions_clase, y_true = testeo$satisfaction)
valores_maxdepth <- c(10, 15, 20, 25, 30, 35, 40, 45, 50, 55)
valores_minsplit <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)
valores_minbucket <- c(1, 3, 5, 7, 9, 11, 15, 20, 15, 50)
valores_auc <- c()
valores_maxdepth <- c(10, 15, 20, 25, 30, 35, 40, 45, 50, 55)
valores_minsplit <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)
valores_minbucket <- c(1, 3, 5, 7, 9, 11, 15, 20, 15, 50)
valores_auc <- c()
valores_maxdepth <- c(10, 15, 20, 25, 30, 35, 40, 45, 50, 55)
valores_minsplit <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)
valores_minbucket <- c(1, 3, 5, 7, 9, 11, 15, 20, 15, 50)
valores_auc <- c()
```{r}
for (i in 1:10){
for (j in 1:10){
for (l in 1:10){
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree, newdata = testeo, type = "class")
auc <- AUC(y_pred = predictions, y_true = testeo$satisfaction)
valores_auc <- c(valores_auc, auc)
}
}
}
library(rpart)
for (i in 1:10){
for (j in 1:10){
for (l in 1:10){
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree, newdata = testeo, type = "class")
auc <- AUC(y_pred = predictions, y_true = testeo$satisfaction)
valores_auc <- c(valores_auc, auc)
}
}
}
for (i in 1:10){
for (j in 1:10){
for (l in 1:10){
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree, newdata = testeo, type = "class")
auc <- AUC(y_pred = predicciones, y_true = testeo$satisfaction)
valores_auc <- c(valores_auc, auc)
}
}
}
valores_maxdepth <- c(10, 15, 20, 25, 30)
valores_minsplit <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)
valores_minbucket <- c(1, 3, 5, 7, 9, 11, 15, 20, 15, 50)
valores_auc <- c()
for (i in 1:10){
for (j in 1:10){
for (l in 1:10){
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree, newdata = testeo, type = "class")
auc <- AUC(y_pred = predicciones, y_true = testeo$satisfaction)
valores_auc <- c(valores_auc, auc)
}
}
}
valores_maxdepth <- c(10, 15, 20, 25, 30)
valores_minsplit <- c(5, 10, 15, 20, 25)
valores_minbucket <- c(1, 3, 5, 7, 9)
valores_auc <- c()
valores_maxdepth <- c(10, 15, 20, 25, 30)
valores_minsplit <- c(5, 10, 15, 20, 25)
valores_minbucket <- c(1, 3, 5, 7, 9)
valores_auc <- c()
```{r}
for (i in 1:5){
for (j in 1:5){
for (l in 1:5){
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class",
control = rpart.control(maxdepth = valores_maxdepth[i], minsplit = valores_minsplit[j], minbucket = valores_minbucket[l], cp = 0, xval = 0))
predicciones <- predict(tree, newdata = testeo, type = "class")
auc <- AUC(y_pred = predicciones, y_true = testeo$satisfaction)
valores_auc <- c(valores_auc, auc)
}
}
}
valores_auc
rpart.plot(tree)
library(rpart.plot)
rpart.plot(tree)
datos_train <- read.csv("train.csv")
datos_train <- read.csv("train.csv")
datos_test <- read.csv("test.csv")
```{r}
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
```{r}
sample_datos$satisfaction <- as.numeric(as.factor(sample_datos$satisfaction)) - 1
sample_datos$satisfaction <- as.numeric(as.factor(sample_datos$satisfaction)) - 1
```{r}
summary(sample_datos)
```{r}
entrenamiento <- sample_datos[1:35000,]
validacion <- sample_datos[35001:42500,]
testeo <- sample_datos[42501:50000,]
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
```{r}
library(rpart)
library(rpart)
```{r}
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree$control
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree$control
```{r}
library(rpart.plot)
rpart.plot(tree)
datos_train <- read.csv("train.csv")
datos_test <- read.csv("test.csv")
datos<-rbind(datos_train, datos_test)
set.seed(123)
sample_datos <- datos[sample(nrow(datos), 50000),]
nrow(sample_datos)
sample_datos$satisfaction <- as.numeric(as.factor(sample_datos$satisfaction)) - 1
summary(sample_datos)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("corrplot")
library(corrplot)
numeric_data <- sample_datos[, sapply(sample_datos, is.numeric)]
cor_matrix <- cor(numeric_data)
corrplot(cor_matrix, method = "color",
tl.col = "black", tl.srt = 45, tl.cex = 0.5,  # Ajustes de etiquetas
cl.ratio = 0.2,  # Ajustar el tamaño de las celdas
addgrid.col = "black", # Añadir color a las líneas de la cuadrícula
addCoef.col = "black",
number.cex = 0.3)
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
delay_satisfecho <- sample_datos$Departure.Delay.in.Minutes[sample_datos$satisfaction == 1]
delay_insatisfecho <- sample_datos$Departure.Delay.in.Minutes[sample_datos$satisfaction == 0]
hist(delay_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Departure Delay in Minutes",
xlim = c(0, max(sample_datos$Departure.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(delay_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Departure Delay in Minutes",
xlim = c(0, max(sample_datos$Departure.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
arrival_satisfecho <- sample_datos$Arrival.Delay.in.Minutes[sample_datos$satisfaction == 1]
arrival_insatisfecho <- sample_datos$Arrival.Delay.in.Minutes[sample_datos$satisfaction == 0]
hist(arrival_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Arrival Delay in Minutes",
xlim = c(0, max(sample_datos$Arrival.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(arrival_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Arrival Delay in Minutes",
xlim = c(0, max(sample_datos$Arrival.Delay.in.Minutes, na.rm = TRUE)),
ylim = c(0, 0.04),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
departure_arrival_satisfecho <- sample_datos$Departure.Arrival.time.convenient[sample_datos$satisfaction == 1]
departure_arrival_insatisfecho <- sample_datos$Departure.Arrival.time.convenient[sample_datos$satisfaction == 0]
hist(departure_arrival_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(departure_arrival_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
gate_satisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 1]
gate_insatisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 0]
hist(gate_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(gate_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "blue",
border = "black")
library(ggplot2)
ggplot(data = sample_datos) +
geom_histogram(mapping = aes(x = satisfaction, fill = Type.of.Travel),
colour = "black", binwidth = 0.5) +
scale_fill_viridis_d() +
facet_wrap(~ Type.of.Travel)
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
onlineb_satisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 1]
onlineb_insatisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 0]
hist(onlineb_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "pink",
border = "black")
# Histograma para los clientes insatisfechos
hist(onlineb_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
onlineb_satisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 1]
onlineb_insatisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 0]
hist(onlineb_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "pink",
border = "black")
# Histograma para los clientes insatisfechos
hist(onlineb_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
entrenamiento <- sample_datos[1:35000,]
validacion <- sample_datos[35001:42500,]
testeo <- sample_datos[42501:50000,]
nrow(entrenamiento)
nrow(validacion)
nrow(testeo)
library(rpart)
tree <- rpart(formula = satisfaction ~ Flight.Distance + Inflight.wifi.service + Ease.of.Online.booking + Food.and.drink + Online.boarding + Seat.comfort + Inflight.entertainment + On.board.service + Leg.room.service + Baggage.handling + Checkin.service + Inflight.service + Cleanliness,
data = entrenamiento,
method = "class")
tree$control
library(rpart.plot)
rpart.plot(tree)
predictions_clase <- predict(tree, newdata = testeo, type = "class")
predictions_prob <- predict(tree, newdata = testeo, type = "prob")
#install.packages("MLmetrics")
library(MLmetrics)
ConfusionMatrix(y_pred = predictions_clase, y_true = testeo$satisfaction)
Accuracy(y_pred = predictions_clase, y_true = testeo$satisfaction)
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction)
Precision(y_pred = predictions_clase, y_true = testeo$satisfaction, positive = 1)
Recall(y_pred = predictions_clase, y_true = testeo$satisfaction)
Recall(y_pred = predictions_clase, y_true = testeo$satisfaction, positive = 1)
F1_Score(y_pred = predictions_clase, y_true = testeo$satisfaction)
F1_Score(y_pred = predictions_clase, y_true = testeo$satisfaction, positive = 1)
AUC(y_pred = predictions_clase, y_true = testeo$satisfaction)
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
departure_arrival_satisfecho <- sample_datos$Departure.Arrival.time.convenient[sample_datos$satisfaction == 1]
departure_arrival_insatisfecho <- sample_datos$Departure.Arrival.time.convenient[sample_datos$satisfaction == 0]
hist(departure_arrival_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(departure_arrival_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Departure arrival time convenient",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 1),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
gate_satisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 1]
gate_insatisfecho <- sample_datos$Gate.location[sample_datos$satisfaction == 0]
hist(gate_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "red",
border = "black")
# Histograma para los clientes insatisfechos
hist(gate_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Gate location",
xlim = c(0, max(sample_datos$Departure.Arrival.time.convenient, na.rm = TRUE)),
ylim = c(0, 2),
col = "blue",
border = "black")
par(mfrow = c(1, 2), mar = c(5, 5, 4, 2), cex = 1.2)
# Filtrar los datos por nivel de satisfacción
onlineb_satisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 1]
onlineb_insatisfecho <- sample_datos$Online.boarding[sample_datos$satisfaction == 0]
hist(onlineb_satisfecho,
probability = TRUE,
main = "Satisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "pink",
border = "black")
# Histograma para los clientes insatisfechos
hist(onlineb_insatisfecho,
probability = TRUE,
main = "Insatisfechos",
xlab = "Online boarding",
xlim = c(0, max(sample_datos$Online.boarding, na.rm = TRUE)),
ylim = c(0, 1),
col = "green",
border = "black")
